#!/bin/bash

KALTURA_FUNCTIONS_RC=/opt/kaltura/bin/kaltura-functions.rc
if [ ! -r "$KALTURA_FUNCTIONS_RC" ];then
        OUT="${BRIGHT_RED}ERROR:could not find $KALTURA_FUNCTIONS_RC so, exiting..${NORMAL}"
        echo -en $OUT
        exit 3
fi

RC_FILE=/etc/kaltura.d/system.ini
if [ ! -r "$RC_FILE" ];then
	echo -e "${BRIGHT_RED}ERROR: could not find $RC_FILE so, exiting..${NORMAL}"
	exit 1 
fi
. $RC_FILE


. $KALTURA_FUNCTIONS_RC
if [ "$1" = "configure" ];then
	update-rc.d kaltura-batch defaults || true
fi
KALTURA_PREFIX=/opt/kaltura
APP_DIR=/opt/kaltura/app
KALTURA_GROUP=kaltura
KALTURA_USER=kaltura
APACHE_USER=www-data
APACHE_GROUP=www-data
if [ -r $CONSENT_FILE ];then
	. $CONSENT_FILE
#elif [ -z "$USER_CONSENT" ];then
#	get_tracking_consent
fi
#. $CONSENT_FILE
trap 'my_trap_handler "${LINENO}" ${$?}' ERR
TIMEZ=`get_tz`
send_install_becon `basename $0` "install_start" 0 
CONFIG_DIR=/opt/kaltura/app/configurations
if [ -r $CONFIG_DIR/system.ini ];then
	. $CONFIG_DIR/system.ini
else
	echo -e "${BRIGHT_RED}ERROR: Missing $CONFIG_DIR/system.ini. Exiting..${NORMAL}"
	exit 1
fi

BATCH_MAIN_CONFS="$APP_DIR/configurations/batch/batch.ini $APP_DIR/configurations/batchBase.ini"

# if we couldn't access the DB to retrieve the secret, assume the post install has not finished yet.
BATCH_PARTNER_ADMIN_SECRET=`echo "select admin_secret from partner where id=-1"|mysql -N -h$DB1_HOST -u$DB1_USER -p$DB1_PASS $DB1_NAME -P$DB1_PORT`
if [ -z "$BATCH_PARTNER_ADMIN_SECRET" ];then
	echo -e "${BRIGHT_RED}ERROR: could not retrieve partner.admin_secret for id -1. Your kaltura MySQL DB is either inaccessible or corrupted. You can drop and redeploy the kaltura DB with: apt-get purge kaltura-db && apt-get install kaltura-db.${NORMAL}" 
	exit 2
fi

BATCH_HOSTNAME=`hostname`
sed -i "s#@BATCH_PARTNER_ADMIN_SECRET@#$BATCH_PARTNER_ADMIN_SECRET#" -i $BATCH_MAIN_CONFS
sed -i "s#@INSTALLED_HOSNAME@#$BATCH_HOSTNAME#" -i $BATCH_MAIN_CONFS
# if this host already has a configured_id ID, in the scheduler table, use that:
BATCH_SCHEDULER_ID=`echo "select configured_id from scheduler where host='$BATCH_HOSTNAME' order by updated_at desc limit 1"|mysql -N -h$DB1_HOST -u$DB1_USER -p$DB1_PASS $DB1_NAME -P$DB1_PORT`
# otherwise, let's generate a random one:
if [ -z "$BATCH_SCHEDULER_ID" ];then
    BATCH_SCHEDULER_ID=`< /dev/urandom tr -dc 0-9 | head -c5`
fi
sed "s#@BATCH_SCHEDULER_ID@#$BATCH_SCHEDULER_ID#"  -i $BATCH_MAIN_CONFS


# logrotate:
ln -sf $APP_DIR/configurations/logrotate/kaltura_batch /etc/logrotate.d/ 
ln -sf $APP_DIR/configurations/logrotate/kaltura_apache /etc/logrotate.d/
ln -sf $APP_DIR/configurations/logrotate/kaltura_apps /etc/logrotate.d/
if [ -x "`which php5enmod 2>/dev/null`" ];then
	php5enmod zz-kaltura
fi
if [ -x "`which phpenmod 2>/dev/null`" ];then
	phpenmod zz-kaltura
fi
if [ -x /opt/kaltura/bin/php7enmod ];then
	/opt/kaltura/bin/php7enmod zz-kaltura
fi

mkdir -p $LOG_DIR/batch 
find $BASE_DIR/app/cache/ $BASE_DIR/log -type d -exec chmod 775 {} \; 
find $BASE_DIR/app/cache/ $BASE_DIR/log -type f -exec chmod 664 {} \; 
chown $KALTURA_USER.$APACHE_GROUP $BASE_DIR/app/cache/ $BASE_DIR/log/* $WEB_DIR/content/entry $BASE_DIR/var/run

# stupidly and only for apache2, service apache2 status outputs to PAGER, thus no good for auto upgrades
if /etc/init.d/apache2 status >/dev/null 2>&1;then
	invoke-rc.d apache2 reload
else
	invoke-rc.d apache2 start
fi

invoke-rc.d kaltura-batch stop >/dev/null 2>&1 || true
invoke-rc.d kaltura-batch start
ln -sf $BASE_DIR/app/configurations/monit/monit.d/batch.rc /etc/monit/conf.d/
ln -sf $BASE_DIR/app/configurations/monit/monit.d/httpd.rc /etc/monit/conf.d/apache2.rc
ln -sf $BASE_DIR/app/configurations/monit/monit.d/memcached.rc /etc/monit/conf.d/
invoke-rc.d monit stop >> /dev/null 2>&1 || true
invoke-rc.d monit start

send_install_becon `basename $0` "install_success" 0 

